generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Product {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  price       Float
  salePrice   Float?
  images      String[]
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  String      @db.ObjectId
  stock       Int         @default(0)
  sku         String      @unique
  tags        String[]
  featured    Boolean     @default(false)
  isNew       Boolean     @default(true)
  rating      Float       @default(0)
  reviews     Review[]
  variants    Variant[]
  specs       Json?       // Technical specifications
  orderItems  OrderItem[]
  wishedByIds String[]    @db.ObjectId
  wishedBy    Customer[]  @relation("CustomerWishlist", fields: [wishedByIds], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Variant {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   // e.g., "Size", "Color"
  value     String   // e.g., "XL", "Red"
  price     Float?   // Additional price if any
  sku       String   @unique
  stock     Int      @default(0)
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  rating    Int
  comment   String?
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @db.ObjectId
  customer  Customer @relation(fields: [customerId], references: [id])
  customerId String  @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  image       String?
  slug        String    @unique
  parent      Category? @relation("SubCategories", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId    String?   @db.ObjectId
  children    Category[] @relation("SubCategories")
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Order {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  orderNumber  String      @unique
  customer     Customer    @relation(fields: [customerId], references: [id])
  customerId   String      @db.ObjectId
  items        OrderItem[]
  total        Float
  subtotal     Float
  tax          Float      @default(0)
  shipping     Float      @default(0)
  discount     Float      @default(0)
  coupon       Coupon?    @relation(fields: [couponId], references: [id])
  couponId     String?    @db.ObjectId
  status       OrderStatus @default(PENDING)
  shippingInfo Json
  paymentInfo  Json?
  notes        String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model OrderItem {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  order       Order    @relation(fields: [orderId], references: [id])
  orderId     String   @db.ObjectId
  product     Product  @relation(fields: [productId], references: [id])
  productId   String   @db.ObjectId
  variantId   String?  @db.ObjectId
  quantity    Int
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Customer {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String    @unique
  phone        String
  address      String?
  password     String?   // Hashed password for customer accounts
  avatar       String?   // Profile picture URL
  orders       Order[]
  reviews      Review[]
  wishlistIds  String[]  @db.ObjectId
  wishlist     Product[] @relation("CustomerWishlist", fields: [wishlistIds], references: [id])
  newsletter   Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Media {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  type      String
  alt       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Coupon {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  code        String    @unique
  type        String    // percentage, fixed
  value       Float
  minAmount   Float?
  maxAmount   Float?
  startDate   DateTime
  endDate     DateTime
  usageLimit  Int?
  usageCount  Int       @default(0)
  orders      Order[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
} 