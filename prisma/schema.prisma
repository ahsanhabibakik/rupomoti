// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  image          String?
  password       String?   // Renamed from hashedPassword for consistency
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  role           Role      @default(USER)
  isAdmin        Boolean   @default(false)

  accounts       Account[]
  sessions       Session[]
  orders         Order[]
  addresses      Address[]
  wishlistItems  WishlistItem[]
  reviews        Review[]
  customers      Customer[]
  paymentMethods UserPaymentMethod[]
  userSettings   UserSetting[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  slug            String   @unique
  description     String?
  image           String?
  isActive        Boolean  @default(true)
  sortOrder       Int      @default(0)
  metaTitle       String?
  metaDescription String?
  
  parentId        String?  @db.ObjectId
  parent          Category? @relation("CategoryChildren", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children        Category[] @relation("CategoryChildren")
  
  products        Product[]
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("categories")
}

model Product {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  slug            String?
  description     String
  price           Float
  salePrice       Float?
  sku             String   @unique
  stock           Int      @default(0)
  images          String[]
  categoryId      String   @db.ObjectId
  category        Category @relation(fields: [categoryId], references: [id])
  isFeatured      Boolean  @default(false)
  isNewArrival    Boolean  @default(false)
  isPopular       Boolean  @default(false)
  status          ProductStatus @default(ACTIVE)
  
  // Additional product details
  weight          Float?   // in grams
  dimensions      String?  // e.g., "10cm x 5cm x 2cm"
  material        String?
  care            String?  // care instructions
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  reviews         Review[]
  wishlistItems   WishlistItem[]
  orderItems      OrderItem[]
  
  @@map("products")
}

model Customer {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String?
  phone     String
  address   String
  city      String?
  zone      String?  // For delivery zone
  userId    String?  @db.ObjectId
  user      User?    @relation(fields: [userId], references: [id])
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders    Order[]

  @@unique([phone])
}

model Order {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  orderNumber   String         @unique
  customerId    String         @db.ObjectId
  customer      Customer       @relation(fields: [customerId], references: [id])
  userId        String?        @db.ObjectId
  user          User?          @relation(fields: [userId], references: [id])
  status        OrderStatus    @default(PENDING)
  paymentStatus PaymentStatus  @default(PENDING)
  paymentMethod PaymentMethod  @default(CASH_ON_DELIVERY)
  subtotal      Float
  deliveryFee   Float
  discount      Float          @default(0)
  total         Float
  deliveryZone  DeliveryZone
  deliveryAddress String
  orderNote     String?
  trackingId    String?
  steadfastInfo Json?          // Steadfast tracking information
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  items         OrderItem[]

  // Courier integration fields
  recipientName      String?
  recipientPhone     String?
  recipientEmail     String?
  recipientCity      String?
  recipientZone      String?
  recipientArea      String?
  courierName        String? // e.g. 'Steadfast', 'RedX', 'Pathao', 'CarryBee'
  courierConsignmentId String?
  courierTrackingCode  String?
  courierStatus        String?
  courierInfo          Json? // Raw response/info from courier
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String  @db.ObjectId
  order     Order   @relation(fields: [orderId], references: [id])
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float

  @@map("order_items")
}

model Address {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  name        String
  phone       String
  street      String
  city        String
  state       String
  postalCode  String
  country     String
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])
}

model Review {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  rating      Int
  comment     String?
  productId   String   @db.ObjectId
  product     Product  @relation(fields: [productId], references: [id])
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("reviews")
}

model WishlistItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())

  @@map("wishlist_items")
}

model Coupon {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  code          String    @unique
  type          CouponType
  value         Float     // Percentage or fixed amount
  minimumAmount Float?
  maximumDiscount Float?
  usageLimit    Int?
  usedCount     Int       @default(0)
  isActive      Boolean   @default(true)
  validFrom     DateTime
  validUntil    DateTime
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Media {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  url         String
  alt         String?
  type        String   // 'image', 'video', 'document'
  section     String   // 'hero-slider', 'logo', 'banner', 'gallery', 'product'
  position    Int      @default(0) // For ordering within a section
  isActive    Boolean  @default(true)
  cloudinaryId String? // Cloudinary public_id for deletion
  metadata    Json?    // Additional data like dimensions, file size, etc.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model MediaSection {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique // 'hero-slider', 'logo', 'banner', etc.
  title       String   // Display name
  description String?
  maxItems    Int      @default(5) // Maximum number of items allowed
  isActive    Boolean  @default(true)
  settings    Json?    // Section-specific settings
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Setting {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  key       String   @unique
  value     Json
  group     String?  @default("general")
  label     String?
  type      String   @default("text") // text, boolean, number, json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserPaymentMethod {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  type        String   // e.g. 'CARD', 'BKASH', 'NAGAD', 'BANK', etc.
  provider    String?  // e.g. 'Visa', 'Mastercard', 'bKash', etc.
  last4       String?  // Last 4 digits for cards
  token       String?  // Tokenized payment info (never store full card info)
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserSetting {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  key       String
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, key])
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIAL
}

enum PaymentMethod {
  CASH_ON_DELIVERY
  BANK_TRANSFER
  MOBILE_BANKING
  CARD_PAYMENT
}

enum DeliveryZone {
  INSIDE_DHAKA
  OUTSIDE_DHAKA
  PERIPHERAL_DHAKA
}

enum CouponType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
}

enum ProductStatus {
  ACTIVE
  TRASHED
  ARCHIVED
}
