// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  image          String?
  password       String?   // Renamed from hashedPassword for consistency
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  role           Role      @default(USER)
  isAdmin        Boolean   @default(false)

  accounts       Account[]
  sessions       Session[]
  orders         Order[]
  addresses      Address[]
  wishlistItems  WishlistItem[]
  reviews        Review[]
  customers      Customer[]
  blogPosts      BlogPost[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  slug        String   @unique
  description String?
  image       String?
  parentId    String?  @db.ObjectId
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children    Category[] @relation("CategoryHierarchy")
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  metaTitle   String?
  metaDescription String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products    Product[]
}

enum ProductLabel {
  NONE
  NEW_ARRIVAL
  BEST_SELLER
  POPULAR
  FEATURED
}

model Product {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String   @unique
  description     String
  price           Float
  salePrice       Float?
  images          Json     // Array of image objects with URLs and metadata
  mainImage       String?   // Primary product image URL
  featuredImage   String?  // Image for featured display
  sku             String?   @unique // Stock Keeping Unit - making it optional
  weight          Float?   // Weight in grams
  dimensions      String?  // Format: "LxWxH cm"
  material        String?  // Product material
  color           String?  // Product color
  brand           String?  // Product brand
  tags            String[] // Product tags for search
  metaTitle       String?  // SEO meta title
  metaDescription String?  // SEO meta description
  categoryId      String   @db.ObjectId
  category        Category @relation(fields: [categoryId], references: [id])
  inStock         Boolean  @default(true)
  featured        Boolean  @default(false)
  newArrival      Boolean  @default(false)
  bestSeller      Boolean  @default(false)
  productLabel    ProductLabel @default(NONE)
  status          ProductStatus @default(ACTIVE)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  orderItems      OrderItem[]
  reviews         Review[]
  wishlistItems   WishlistItem[]

  @@map("products")
}

model BlogPost {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String   @unique
  slug        String   @unique
  content     String
  excerpt     String?
  featuredImage String?
  metaTitle   String?
  metaDescription String?
  metaKeywords String?
  status      BlogStatus @default(DRAFT)
  category    BlogCategory @default(NEWS)
  authorId    String?    @db.ObjectId
  author      User?      @relation(fields: [authorId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  publishedAt DateTime?

  @@map("blog_posts")
}

enum BlogStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum BlogCategory {
  NEWS
  TRENDS
  REVIEWS
  HOW_TO
  STYLE_GUIDE
}

model Coupon {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  code        String   @unique
  type        CouponType
  value       Float
  minPurchase Float?
  maxDiscount Float?
  validFrom   DateTime
  validTo     DateTime
  usageLimit  Int?
  usedCount   Int      @default(0)
  status      CouponStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  shippingProviderId String? @db.ObjectId
  shippingProvider ShippingProvider? @relation(fields: [shippingProviderId], references: [id])

  orders      Order[]
}

enum AuthType {
  BASIC
  TOKEN
  OAUTH
}

model ShippingProvider {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  type                String   // 'pathao' or 'redx' or 'steadfast'
  isActive           Boolean  @default(true)
  averageDeliveryTime Float    @default(0) // in days
  successRate         Float    @default(0) // percentage
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  orders              Order[]
  coupons            Coupon[]
}

enum CouponStatus {
  ACTIVE
  EXPIRED
  USED_UP
  INACTIVE
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
  ARCHIVED
}

model Customer {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String?
  phone     String
  address   String
  city      String?
  zone      String?  // For delivery zone
  userId    String?  @db.ObjectId
  user      User?    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders    Order[]

  @@unique([phone])
}

model Order {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  orderNumber   String         @unique
  customerId    String         @db.ObjectId
  customer      Customer       @relation(fields: [customerId], references: [id])
  userId        String?        @db.ObjectId
  user          User?          @relation(fields: [userId], references: [id])
  status        OrderStatus    @default(PENDING)
  paymentStatus PaymentStatus  @default(PENDING)
  paymentMethod PaymentMethod  @default(CASH_ON_DELIVERY)
  subtotal      Float
  deliveryFee   Float
  discount      Float          @default(0)
  total         Float
  deliveryZone  DeliveryZone
  deliveryAddress String
  orderNote     String?
  trackingId    String?
  shippingProviderId String?    @db.ObjectId
  shippingProvider   ShippingProvider? @relation(fields: [shippingProviderId], references: [id])
  shippingStatus    ShippingStatus?   @default(PENDING)
  shippingInfo      Json?            // Shipping provider specific information
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  items         OrderItem[]
  coupon        Coupon?        @relation(fields: [couponId], references: [id])
  couponId      String?        @db.ObjectId
}

enum ShippingStatus {
  PENDING
  PICKED_UP
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  FAILED
  RETURNED
}

model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String   @db.ObjectId
  productId String   @db.ObjectId
  name      String   // Store product name at time of order
  price     Float    // Store price at time of order
  quantity  Int
  image     String   // Store product image at time of order

  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])
}

model Address {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  name        String
  phone       String
  street      String
  city        String
  state       String
  postalCode  String
  country     String
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  productId String   @db.ObjectId
  rating    Int
  comment   String?
  isVerified Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model WishlistItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  productId String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
}

model Media {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  url         String
  alt         String?
  type        String   // 'image', 'video', 'document'
  section     String   // 'hero-slider', 'logo', 'banner', 'gallery', 'product'
  position    Int      @default(0) // For ordering within a section
  isActive    Boolean  @default(true)
  cloudinaryId String? // Cloudinary public_id for deletion
  metadata    Json?    // Additional data like dimensions, file size, etc.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model MediaSection {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique // 'hero-slider', 'logo', 'banner', etc.
  title       String   // Display name
  description String?
  maxItems    Int      @default(5) // Maximum number of items allowed
  isActive    Boolean  @default(true)
  settings    Json?    // Section-specific settings
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Setting {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  key       String   @unique
  value     Json
  group     String?  @default("general")
  label     String?
  type      String   @default("text") // text, boolean, number, json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIAL
}

enum PaymentMethod {
  CASH_ON_DELIVERY
  BANK_TRANSFER
  MOBILE_BANKING
  CARD_PAYMENT
}

enum DeliveryZone {
  INSIDE_DHAKA
  OUTSIDE_DHAKA
  PERIPHERAL_DHAKA
}

enum CouponType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
}
